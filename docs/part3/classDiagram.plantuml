@startuml

'Admin class
class Admin<? extends User> {
    - userRoles : UserRoles
    - sellerGroupList : List<SellerGroup>
    - userGroupList : List<User>
    {method} + getAllPurchases() : List<OrderItem>
    {method} + getAllSellerGroup(repo : IUnitofWork ) : List<SellerGroup>
    {method} + getAllUsers() : List<User>
    {method} + createSellerGroup(groupName : String) : List<SellerGroup>
    {method} + addSellerToGroup(groupName : String, userId : int) : GroupMembership
    {method} + removeSellerFromGroup(groupName : String, userId : int) : GroupMembership
    {method} + removeListing(listingId : int) : Listing
}
'AuctionListing class
class AuctionListing<? extends Listing> {
    {method} + bid(bid : Money, bidTime : localDateTime, userId : int): Bid
}
'Bid Class
class Bid<? extends EntityObject> {
    - listingId : int
    - userId : int
    - bidAmount : Money
    {method} {static} + create(listingId : int, userId : int, bidAmount : Money) : Bid

}
'Customer Class
class Customer <? extends User> {
    - userRoles: UserRoles
    - listingList : List<Listing>
    {method} + checkoutListing(address : String,  oiList : List<OrderItem>) : Order
    {method} + bid(listingId : int, bidAmount : Money) : Bid
    {method} + viewAllOrders() : List<Order>
    {method} + modifyOrder(orderId : int, listingId : int, quantity : int) : List<EntityObject>
    {method} + cancelOrder(orderId : int) : Order
}
'EntityObject
class EntityObject{
    - injector : ISQLInjector
    - param : List<Object>
}
'Filter Class
class Filter{
    - filterKey : String
    - filterVal : Object

}
'FixedPriceListing Class
class FixedPriceListing <? extends User>{

}
'GroupMembership Class
class GroupMembership <? extends EntityObject>{
    - groupId : int
    - userId : int
    {static} + create(groupId : int, userId : int) : GroupMembership
    {static} + getGroupMembershipByUserId(userId : int, repo : IUnitofWork) : GroupMembership
    + markForDelete() : void
}
'Listing Class
class Listing<? extends EntityObject>{
    - listingId : int
    - groupId : int
    - type : ListingTypes
    - title : String
    - description : String
    - quantity : int
    - price : Money
    - startTime : LocalDateTime
    - endTime : LocalDateTime
    {method} {static}  + create(listingId : int, groupId : int, type : ListingTypes, title : String, description : String, quantity : int, price : Money, startTime : LocalDateTime, endTime : LocalDateTime) : Listing
    {method} {static} + getListingById(listingId : int, repo : IUnitofWork) : Listing
    {method} {static} + getListingByFilterCondition(filterCondition : List<Filter>, repo : IUnitofWork) : List<Listing>
    {method} {static} + getInjector(key : String) : ISQLInjector
}
'Order Class
class Order<? extends EntityObject>{
    - orderId : int
    - userId : int
    - address : String
    - orderItemList : List<OrderItem>
    - repo : IUnitofWork

    {method} {static}  + create(orderId : int, userId : int, address : String) : Order
    {method} {static}  + create(orderId : int, userId : int, address : String, orderItemList : List<OrderItem>) : Order
    {method} {static} + getOrdersByGroupId(groupId : int, repo : IUnitofWork) : List<OrderItem>
    {method} {static} + getOrdersByUserId(userId : int, repo : IUnitofWork) : List<Order>
    {method} {static} + getLastOrderItem(repo : IUnitofWork) : Order
    {method} {static} + getAllOrders(repo : IUnitofWork) : List<Order>
    {method} {static} + getOrderItemList(orderId : int, repo : IUnitofWork) : List<OrderItem>
    + modifyOrderItem(listingId : int, quantity : int, stockLevel : int) : OrderItem
    + getOrderItem (listingId : int) : OrderItem
}

'OrderItem Class
class OrderItem<extends EntityObject>{
    - orderId : int
    - listingId : int
    - quantity : int
    - unitPrice : Money
    - priceInCents : int

    {static} + create(orderId : int, listingId : int, quantity : int, unitPrice : Money) : OrderItem
}

class Seller <extends User>{
    - userRoles : UserRoles
    - sg : SellerGroup
    - listingList : List<Listing>
    - ordersList : List<OrderItem>
    - fullOrderList : List<Order>

    + createListing(groupId : int, type : ListingTypes, title : String, description : String, quantity : int, price : Money, startTime : LocalDateTime, endTime : LocalDateTime)
    + deleteListing(listingId : int, groupId : int) : Listing
    + viewSellerListings(groupId : int) : List<Listing>
    + viewOrders() : List<OrderItem>
    + viewFullOrder(groupId : int) : List<Order>
    + modifyOrder(orderId : int, listingId : int, groupId : int, quantity : int) : List<EntityObject>
    + cancelOrder(orderId : int, groupId : int) : Order

}

'SellerGroup Class
class SellerGroup <extends Entity Object>{
    - groupId : int
    - groupName : String
    - sellerList : List<GroupMembership>
    - listingList : List<Listing>
    - ordersList : List<OrderItem>
    - repo : IUnitofWork

    + addSeller(userId : int, groupId : int) : GroupMembership
    + removeSeller(userId : int, groupId : int) : GroupMembership
    {static} + create(groupId : int, groupName : String) : SellerGroup
    {static} + create(groupId : int, groupName : String, sellerList : List<GroupMembership>, listingList : List<Listing>, ordersList : List<OrderItem>) : SellerGroup
    {static} + getSellerGroupByGroupName(groupName : String, repo : IUnitofWork) : SellerGroup
    {static} + getAllSellerGroup(repo : IUnitofWork) : List<SellerGroup>

}
'User Class
abstract class User <extends EntityObject>{
    - email : String
    - username : String
    - password : String
    - userId : int
    - repo : IUnitofWork

    {static} + create(email : String, username : String, password : String, userId : int, roles : String) : User
    {static} + getAllUser(repo : IUnitofWork) : List<User>
    {static} + getUserByUsernamePassword(email : String, password : String, repo : IUnitofWork) : User
    + login() : String
    {static} + register(email : String, username : String, password : String, roles : String, repo : IUnitofWork) : User
    
}
@enduml